#+COMMENT: ---------------------------------------------------------------------------------------------------------------
#+COMMENT: Introduction:
#+COMMENT:  
#+COMMENT: `include-all-org-files' is a Babel CALLable block who can generate a list of #+INCLUDE statements;
#+COMMENT: useful when you want have a main.org file and several .org files to be included, one per chapter.
#+COMMENT:
#+COMMENT: The .org files will be included in alphabetical order.
#+COMMENT:
#+COMMENT: Before CALLing include-all-org-files, you should a) copy its definition (the #+BEGIN_SRC/#+END_SRC
#+COMMENT: block) into your org file, or alternatively b) you could include it in your Babel Library:
#+COMMENT:
#+COMMENT: M-x org-babel-lob-ingest RET include-all-org-files.org RET
#+COMMENT:
#+COMMENT: Synopsis:
#+COMMENT:
#+COMMENT:   #+CALL: include-all-org-files(i_level=<nubmer>, i_name=<string>, i_dir=<string>) :exports none :results raw
#+COMMENT:
#+COMMENT: All the call parameters are optional:
#+COMMENT:
#+COMMENT:   i_level: type    = an integer
#+COMMENT:            meaning = nest level of inclusion (same as the :minlevel parameter of #+INCLUDE)
#+COMMENT:            default = no :minlevel at all (useful if the included files are just plain text)
#+COMMENT:
#+COMMENT:   i_name : type    = a string
#+COMMENT:            meaning = custom name for the start/end delimiters of the region that contains the
#+COMMENT:                      `#+INCLUDE' filenames; use it when you #+CALL include-all-org-files
#+COMMENT:                      more than once in the same org file
#+COMMENT:            default = no custom delimiter at all
#+COMMENT:
#+COMMENT:   i_dir  : type    = a string
#+COMMENT:            meaning = all .org files in this dir will be included
#+COMMENT:            default = "."
#+COMMENT:
#+COMMENT: ---------------------------------------------------------------------------------------------------------------
#+COMMENT: Usage example:
#+COMMENT:  
#+COMMENT:  See the example file `example/main.org'.
#+COMMENT:  
#+COMMENT: ---------------------------------------------------------------------------------------------------------------

#+NAME: include-all-org-files
#+BEGIN_SRC emacs-lisp :exports none :results raw
  (let 
    ((tagname (concat "DYNAMIC_INCLUDES_DELIMITER" (if (boundp 'i_name) (format "_%s" (upcase i_name)) "")))
     (level-message-string (if (boundp 'i_level) (format " :minlevel %d" i_level) ""))
     (dir_string (if (boundp 'i_dir) i_dir "."))
     (case-fold-search t))
    (when 
        (search-forward-regexp
         (format "^#\\+comment: %s\n+\\(.+\n+\\)*?#\\+comment: end_%s\n" (downcase tagname) (downcase tagname))
         nil
         t)         
      (delete-region (match-beginning 0) (match-end 0)))
    (print
     (mapconcat
      'identity
      (append      
       (list (concat "#+COMMENT: " tagname) "")       
       (mapcar 
        (lambda (i) (format "#+INCLUDE: \"%s\"%s\n" i level-message-string)) 
        (remove (concat "./" (file-name-nondirectory (buffer-file-name))) (mapcar (lambda (i) (concat dir_string "/" i)) (directory-files dir_string nil "^.*\\.org$" nil))))
       (list (concat "#+COMMENT: END_" tagname)))
      "\n")))
#+END_SRC
