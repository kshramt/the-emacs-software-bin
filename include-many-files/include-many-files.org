#+COMMENT: ---------------------------------------------------------------------------------------------------------------
#+COMMENT: Introduction:
#+COMMENT:  
#+COMMENT: `include-many-files' is a Babel CALLable block who can generate a list of #+INCLUDE statements;
#+COMMENT: useful when you want have a main.org file and several .org files to be included, one per chapter.
#+COMMENT:
#+COMMENT: The .org files will be included in alphabetical order.
#+COMMENT:
#+COMMENT: Before CALLing include-many-files, you should a) copy its definition (the #+BEGIN_SRC/#+END_SRC
#+COMMENT: block) into your org file, or alternatively b) you could include it in your Babel Library:
#+COMMENT:
#+COMMENT: M-x org-babel-lob-ingest RET include-many-files.org RET
#+COMMENT:
#+COMMENT: Synopsis:
#+COMMENT:
#+COMMENT:   #+CALL: include-many-files(i_params=<string>, i_delim_name=<string>, i_dir=<string>, i_match=<string>) :exports none :results raw
#+COMMENT:
#+COMMENT: All the call parameters are optional:
#+COMMENT:
#+COMMENT:   i_params:      type    = a string
#+COMMENT:                  meaning = additional parameters to pass to #+INCLUDE (typically ":minlevel 2" or similar)
#+COMMENT:                  default = no additional params at all
#+COMMENT:
#+COMMENT:   i_delim_name : type    = a string
#+COMMENT:                  meaning = custom name for the start/end delimiters of the region that contains the
#+COMMENT:                            `#+INCLUDE' filenames; use it when you #+CALL include-many-files
#+COMMENT:                            more than once in the same org file
#+COMMENT:                  default = no custom delimiter at all
#+COMMENT:
#+COMMENT:   i_dir   :      type    = a string
#+COMMENT:                  meaning = files in this dir will be included
#+COMMENT:                  default = "."
#+COMMENT:
#+COMMENT:   i_match :      type    = a string
#+COMMENT:                  meaning = files matching this regexp pattern will be included (use also ^ and $ delimiters if you need)
#+COMMENT:                  default = "^.*\\.org$"
#+COMMENT:
#+COMMENT: ---------------------------------------------------------------------------------------------------------------
#+COMMENT: Usage example:
#+COMMENT:  
#+COMMENT:  See the example file `example/main.org'.
#+COMMENT:  
#+COMMENT: ---------------------------------------------------------------------------------------------------------------

#+NAME: include-many-files
#+BEGIN_SRC emacs-lisp :exports none :results raw
  (let 
      ((tagname (concat "DYNAMIC_INCLUDES_DELIMITER" (if (boundp 'i_delim_name) (format "_%s" (upcase i_delim_name)) "")))
       (params_string (if (boundp 'i_params) (format " %s" i_params) ""))
       (dir_string (if (boundp 'i_dir) i_dir "."))
       (match_this_pattern_string (if (boundp 'i_match) i_match "^.*\\.org$"))
       (case-fold-search t))
    (when 
        (search-forward-regexp
         (format "^#\\+comment: %s\n+\\(.+\n+\\)*?#\\+comment: end_%s\n" (downcase tagname) (downcase tagname))
         nil
         t)         
      (delete-region (match-beginning 0) (match-end 0)))
    (print
     (mapconcat
      'identity
      (append      
       (list (concat "#+COMMENT: " tagname) "")       
       (mapcar 
        (lambda (i) (format "#+INCLUDE: \"%s\"%s\n" i params_string)) 
        (remove                           ; remove self from list
         (concat "./" (file-name-nondirectory (buffer-file-name))) 
         (mapcar 
          (lambda (i) (concat dir_string "/" i)) 
          (directory-files dir_string nil match_this_pattern_string nil))))
       (list (concat "#+COMMENT: END_" tagname)))
      "\n")))
#+END_SRC
