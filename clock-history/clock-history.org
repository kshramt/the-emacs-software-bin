* taskA
  CLOCK: [2014-02-20 gio 01:25]--[2014-02-20 gio 01:55] =>  0:30
  CLOCK: [2014-02-20 gio 00:30]--[2014-02-20 gio 00:35] =>  0:05

* taskB
  CLOCK: [2014-02-20 gio 01:10]--[2014-02-20 gio 01:25] =>  0:15
  CLOCK: [2014-02-20 gio 00:35]--[2014-02-20 gio 00:45] =>  0:10

* taskC
  CLOCK: [2014-02-20 gio 02:20]--[2014-02-20 gio 02:50] =>  0:30
  CLOCK: [2014-02-20 gio 00:45]--[2014-02-20 gio 01:05] =>  0:20
* summary

#+BEGIN_SRC emacs-lisp :exports none
  (defun org-dblock-write:clock-history (params)  
    (require 'cl)
    (let ((listaclock nil))    
      (org-map-entries
       (lambda () 
         (mapc
          (lambda (j) 
            (add-to-list 
             'listaclock 
             (format 
              "| %s | %s |" 
              (cdr j) 
              (buffer-substring-no-properties 
               (progn (beginning-of-line) (point)) 
               (progn (end-of-line) (point))))))
          (cl-remove-if-not (lambda (i) (equal (car i) "CLOCK")) (org-entry-properties))))
       nil 
       nil)
      (setq listaclock (sort (copy-sequence listaclock) (lambda (a b) (funcall (or (plist-get params 'order-by) 'string<) a b))))
      (insert "| Period | Activity |\n")
      (insert "|--------|----------|\n")
      (insert (mapconcat 'identity listaclock "\n"))))
#+END_SRC

#+BEGIN: clock-history order-by (lambda (a b) (string< a b))
| Period                                                  | Activity |
|---------------------------------------------------------+----------|
| [2014-02-20 gio 00:30]--[2014-02-20 gio 00:35] =>  0:05 | * taskA  |
| [2014-02-20 gio 00:35]--[2014-02-20 gio 00:45] =>  0:10 | * taskB  |
| [2014-02-20 gio 00:45]--[2014-02-20 gio 01:05] =>  0:20 | * taskC  |
| [2014-02-20 gio 01:10]--[2014-02-20 gio 01:25] =>  0:15 | * taskB  |
| [2014-02-20 gio 01:25]--[2014-02-20 gio 01:55] =>  0:30 | * taskA  |
| [2014-02-20 gio 02:20]--[2014-02-20 gio 02:50] =>  0:30 | * taskC  |
#+END:


